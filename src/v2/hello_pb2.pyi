# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import abc
import concurrent.futures
import google.protobuf.message
import typing

class EmptyRequest(google.protobuf.message.Message):

    def __init__(self,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> EmptyRequest: ...
    def MergeFrom(self, other_msg: google.protobuf.message.Message) -> None: ...
    def CopyFrom(self, other_msg: google.protobuf.message.Message) -> None: ...

class EmptyResponse(google.protobuf.message.Message):

    def __init__(self,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> EmptyResponse: ...
    def MergeFrom(self, other_msg: google.protobuf.message.Message) -> None: ...
    def CopyFrom(self, other_msg: google.protobuf.message.Message) -> None: ...

class EchoRequest(google.protobuf.message.Message):
    name = ... # type: typing.Text

    def __init__(self,
        name : typing.Optional[typing.Text] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> EchoRequest: ...
    def MergeFrom(self, other_msg: google.protobuf.message.Message) -> None: ...
    def CopyFrom(self, other_msg: google.protobuf.message.Message) -> None: ...

class EchoResponse(google.protobuf.message.Message):
    server_id = ... # type: typing.Text
    name = ... # type: typing.Text

    def __init__(self,
        server_id : typing.Optional[typing.Text] = None,
        name : typing.Optional[typing.Text] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> EchoResponse: ...
    def MergeFrom(self, other_msg: google.protobuf.message.Message) -> None: ...
    def CopyFrom(self, other_msg: google.protobuf.message.Message) -> None: ...

class PingRequest(google.protobuf.message.Message):
    ping = ... # type: typing.Text

    def __init__(self,
        ping : typing.Optional[typing.Text] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PingRequest: ...
    def MergeFrom(self, other_msg: google.protobuf.message.Message) -> None: ...
    def CopyFrom(self, other_msg: google.protobuf.message.Message) -> None: ...

class PingResponse(google.protobuf.message.Message):
    ping = ... # type: typing.Text

    def __init__(self,
        ping : typing.Optional[typing.Text] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PingResponse: ...
    def MergeFrom(self, other_msg: google.protobuf.message.Message) -> None: ...
    def CopyFrom(self, other_msg: google.protobuf.message.Message) -> None: ...

class Hello(typing.Any, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Health(self,
        rpc_controller: typing.Any,
        request: EmptyRequest,
        done: typing.Optional[typing.Callable[[EmptyResponse], None]],
    ) -> concurrent.futures.Future[EmptyResponse]: ...
    @abc.abstractmethod
    def Echo(self,
        rpc_controller: typing.Any,
        request: EchoRequest,
        done: typing.Optional[typing.Callable[[EchoResponse], None]],
    ) -> concurrent.futures.Future[EchoResponse]: ...
    @abc.abstractmethod
    def Ping(self,
        rpc_controller: typing.Any,
        request: PingRequest,
        done: typing.Optional[typing.Callable[[PingResponse], None]],
    ) -> concurrent.futures.Future[PingResponse]: ...
class Hello_Stub(Hello):
    def __init__(self, rpc_channel: typing.Any) -> None: ...
    def Health(self,
        rpc_controller: typing.Any,
        request: EmptyRequest,
        done: typing.Optional[typing.Callable[[EmptyResponse], None]],
    ) -> concurrent.futures.Future[EmptyResponse]: ...
    def Echo(self,
        rpc_controller: typing.Any,
        request: EchoRequest,
        done: typing.Optional[typing.Callable[[EchoResponse], None]],
    ) -> concurrent.futures.Future[EchoResponse]: ...
    def Ping(self,
        rpc_controller: typing.Any,
        request: PingRequest,
        done: typing.Optional[typing.Callable[[PingResponse], None]],
    ) -> concurrent.futures.Future[PingResponse]: ...